
package networkanalyis.proj;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JOptionPane;
import org.jgrapht.*;
import org.jgrapht.graph.*;
import java.net.*;
import java.util.*;

import org.jgrapht.alg.connectivity.KosarajuStrongConnectivityInspector;
import org.jgrapht.alg.interfaces.ShortestPathAlgorithm.SingleSourcePaths;
import org.jgrapht.alg.interfaces.StrongConnectivityAlgorithm;
import org.jgrapht.alg.shortestpath.DijkstraShortestPath;
import org.jgrapht.graph.DefaultDirectedGraph;
import org.jgrapht.graph.DefaultEdge;
import org.jgrapht.Graph;
import org.jgrapht.GraphPath;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.jgrapht.GraphPath;
import org.jgrapht.alg.shortestpath.AllDirectedPaths;
import org.jgrapht.graph.DefaultDirectedGraph;
import org.jgrapht.graph.DefaultEdge;



import java.util.ResourceBundle;
public class GUI extends javax.swing.JFrame {
    
    //List of nodes stored here
    public List<Node> nodelist = new ArrayList<Node>();
    
    
    
    

    /**
     * Creates new form NetworkAnalysisGUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtPaths = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtActivities = new javax.swing.JTextArea();
        btnRun = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        textName = new javax.swing.JTextField();
        textDuration = new javax.swing.JTextField();
        textDependents = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        buttonAbout = new javax.swing.JButton();
        

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Network Diagram Analyzer"));

        txtPaths.setEditable(false);
        txtPaths.setColumns(20);
        txtPaths.setRows(5);
        jScrollPane2.setViewportView(txtPaths);

        jLabel4.setText("Activities");

        jLabel5.setText("Paths");

        txtActivities.setEditable(false);
        txtActivities.setColumns(20);
        txtActivities.setRows(5);
        jScrollPane1.setViewportView(txtActivities);

        btnRun.setText("Run");
        btnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addComponent(btnRun, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRun, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jLabel1.setText("Name");

        jLabel2.setText("Duration");

        jLabel3.setText("Dependents");

        btnAdd.setText("Add Activity");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        jLabel6.setText("See User Guide for additional Help");

        buttonAbout.setText("About");
        buttonAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAboutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 674, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(textName, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(68, 68, 68)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(textDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnReset)
                                .addGap(202, 202, 202)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(textDependents, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(35, 35, 35)
                                        .addComponent(btnAdd))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnExit)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel6)))))))
                .addContainerGap(36, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(buttonAbout)
                .addGap(98, 98, 98))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(buttonAbout)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textDependents, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnExit)
                            .addComponent(btnReset))
                        .addGap(43, 43, 43))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(51, 51, 51))))
        );

        pack();
    }// </editor-fold>                        

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {                                        
        System.exit(0);
    }                                       

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {                                         
        txtActivities.setText("");
        txtPaths.setText("");
        nodelist = Collections.EMPTY_LIST;
        addclicked = 0;
    }                                        

    int addclicked = 0;
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {                                       
          
        //grabbing data from GUI
        String name = textName.getText();
        int duration = Integer.parseInt(textDuration.getText());
        //convert input String of dependents into an array
        String dependent_input = textDependents.getText();   
        List<String> dependents = new ArrayList<String>(Arrays.asList(dependent_input.split(",")));
        //If field is blank it empties dependent list
        if (textDependents.getText().trim().isEmpty()) {
            dependents = Collections.<String>emptyList();
        }
        List<String> children = new ArrayList<String>(Arrays.asList());
        
        //Adding node to an ArrayList
        Node node = new Node(name,duration,dependents,children);
        nodelist.add(node);
        
        //Display to GUI new activity
        txtActivities.append(nodelist.get(addclicked).getName()+" "+nodelist.get(addclicked).getDuration()+" "+ (nodelist.get(addclicked).getDependents()+"\n"));
       
                                        
    addclicked++;

        
    }                                      

    private void btnRunActionPerformed(java.awt.event.ActionEvent evt)
    {                         
   System.out.println("HEEEEEEEEELP");
        
        
        //build graph
        
        //Initiliaze
        //Create graph with String as a vertex and default edge.
        //Notice that when I do new, I pass DefaultEdge.class as an argument
            DefaultDirectedGraph<Node, DefaultEdge> directedGraph =
            new DefaultDirectedGraph<Node, DefaultEdge>(DefaultEdge.class);
        
        //1. Add all vertices
       
        for(int v = 0; v < nodelist.size(); v++){
            directedGraph.addVertex(nodelist.get(v));
        }
        
        
        
        //2. Add all Paths
        
       for(int r = 0; r<nodelist.size(); r++){
           for(int t = 1; t< nodelist.size(); t++){
               if(nodelist.get(t).getDependents().contains(nodelist.get(r).getName())){
               directedGraph.addEdge(nodelist.get(r), nodelist.get(t));
               
               //Adds node name to Children list
               nodelist.get(r).addChildren(nodelist.get(t).getName());
               }
           }
  
               }
       
        //3.create a set with ALL source nodes
       
      Set<Node> sourceNodes = new HashSet<Node>();
      for(int u = 0; u <nodelist.size(); u++){
          if(nodelist.get(u).getDependents().isEmpty()){
              sourceNodes.add(nodelist.get(u));
      }
    }
     
     
      //4.create a set with ALL destination nodes
       
        Set<Node> destinationNodes = new HashSet<Node>();
        
       for(int i = 0; i < nodelist.size(); i++){
           
           if(nodelist.get(i).getChildren().isEmpty()){
               destinationNodes.add(nodelist.get(i));
           }
           
       }
       
       
       
        /*creates a list of a list of strings which are my paths. Example
            [
                [A,C,D,G],
                [A,C,D,F],
                [B,C,D,G],
                [B,C,D,F],
                [B,C,E,F]
            ]
       
        */
        
        List<GraphPath<Node, DefaultEdge>> paths = 
                     new AllDirectedPaths<Node, DefaultEdge>
        (directedGraph).getAllPaths(sourceNodes, destinationNodes, true, null);
       
             
       //for each list of paths
//       for(int i =0; i< paths.size(); i++){
//           for(int j = 0; j<paths.get(i); i++)
//       }
//      
       Pathlist fpath = new Pathlist();
       
       for(GraphPath<Node,DefaultEdge> path: paths) {
           int pathtime =0;
           
           
           //for each node in the path
           for(Node nodeString: path.getVertexList()) {
                    
               
                   txtPaths.append(nodeString.getName() + "-->");
                  
                   pathtime = pathtime + nodeString.getDuration();
               }
            //attempt to build list of paths add names
                  // fpath.addPath(nodeString);
                   //
           //adding time to pathlist
           fpath.setPathtime(pathtime);
           //
               txtPaths.append(Integer.toString(pathtime));
               //sort by duration
              
               
               
              txtPaths.append("\n"); 
              
           }
           
       System.out.println();
 
    }
       
        
   
       
        
       // txtPaths.setText(directedGraph.vertexSet().toString());
     
        
       //AllDirectedPaths(Graph<V,E> graph) printall = new AllDirectedPaths(Graph<V,E> directedGraph);


       
// Add remaining vertices and edges
        
        
//
//        // Build a Adjacency List
//       int vert = nodelist.size();
//       int e = nodelist.size();
//       
//       //---------------------------------------------------------------------
//       Pathfinder paths = new Pathfinder(vert);
//       
//       
//       //Iterates through checking dependencies
//       for(int i = 0; i <= nodelist.size(); i++){
//           
//            for(int x = 0; x <= nodelist.size(); x++){ 
//                    if(nodelist.get(x).getDependents().contains(nodelist.get(i).getName()) == true){
//                        
//                    //------paths.addEdge(nodelist.indexOf(nodelist.get(i)), nodelist.indexOf(nodelist.get(x)));
//                }
//           
//            }
//    
//           
//       }
//       
//       //Checks If its a starting node to start path
////       for(int s = 0; s <= nodelist.size(); s++){
////        if(nodelist.get(s).getDependents() == null){
////            
////            for(int q = 0; q <= nodelist.size(); q++)
////           //------ paths.printAllPaths(s, e).get(q)
////            
////              txtPaths.setText(paths.printAllPaths(nodelist.indexOf(nodelist.get(s)), nodelist.indexOf(nodelist.get(e)))); 
////           }
////       
////       }
                                          

    private void buttonAboutActionPerformed(java.awt.event.ActionEvent evt) {                                            
        int about = JOptionPane.showConfirmDialog(rootPane, "Version 0.4\n"
                + " Benedetto H.\nAnibal B.\n Jude R.\nVasant K.");
    }                                           
 
    
    
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(NetworkAnalysisGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(NetworkAnalysisGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(NetworkAnalysisGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(NetworkAnalysisGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new NetworkAnalysisGUI().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnRun;
    private javax.swing.JButton buttonAbout;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField textDependents;
    private javax.swing.JTextField textDuration;
    private javax.swing.JTextField textName;
    private javax.swing.JTextArea txtActivities;
    private javax.swing.JTextArea txtPaths;
    // End of variables declaration                   
}

    
    

